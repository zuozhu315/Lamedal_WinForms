<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <metadata name="imageSetup1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAQcAAAAADoBwAAFgAAACgAAAAwAAAAYAAAAAEABAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATMzMzMQAAAA
        AAAAAAAAAAAAAAAAAAATMzO7uzMzMQAAAAAAAAAAAAAAAAAAADMzuIiIiIiLMzMAAAAAAAAAAAAAAAAA
        Ezu4iIiIiIiIi7MxAAAAAAAAAAAAAAADM7iIiIiIiIiIiIuzMAAAAAAAAAAAAAAzuIiIi7u7u7u4iIiL
        MwAAAAAAAAAAAAM7iIi7u7u7u7u7u4iIszAAAAAAAAAAADO4iLu7u7u7u7u7u7uIizMAAAAAAAAAAzu4
        u7u7u7u7u7u7u7u7i7MwAAAAAAAAE7u7u7u7u7u7u7u7u7u7u7sxAAAAAAAAM7u7u7u7u7u7u7u7u7u7
        u7szAAAAAAABO7u7u7u7u4h3d3iLu7u7u7uzEAAAAAADO7u7u7u4dxERERE3i7u7u7uzMAAAAAATu7u7
        u7txAAERERAAF7u7u7u7MQAAAAAzu7u7u7MAMzu7u7szADu7u7u7MwAAAAAzu7u7uzAzu7u7u7u7MwO7
        u7u7swAAAAA7u7u7sxO7u7u7u7u7uzE7u7u7swAAAAE7u7u7M7u7u7u7u7u7u7szu7u7sxAAAAM7u7uz
        M7u7u7u7u7u7u7szO7u7szAAAAM7u7u7O7u7u7u7u7u7u7uzO7u7szAAAAM7u7u7u7u7u7u7u7u7u7u7
        u7u7szAAAAM7u7u7u7u7u7u7u7u7u7u7u7u7szAAAAM7u7u7u7u7iIu7u7iIu7u7u7u7szAAAAE7u7u7
        u7u7c3iIiIc3u7u7u7u7sxAAAAE7u7u7u7u4MAeIiHADi7u7u7u7sxAAAAA7u7i7u7uIAAeIiHAAiIu7
        u4u7swAAAAA7u4iIi4iIAxeIiHAxiIi4iIiLswAAAAAzuI//iIiId3iIiId3iIiIj/iLMwAAAAADuI//
        iIiIh3j//4d4iIiI//iLMAAAAAADOI//iIiIiP////+IiIiI//iLMAAAAAAAO4//iIiP////////+IiI
        //izAAAAAAAAM4j/iIj//////////4iI/4gzAAAAAAAAA7iP+I//////////////+IswAAAAAAAAATuP
        ////////////////+LMQAAAAAAAAABO4////////////////izEAAAAAAAAAAAE7j//////////////4
        sxAAAAAAAAAAAAATuI////////////iLMQAAAAAAAAAAAAAAM7j//////////4szAAAAAAAAAAAAAAAA
        AzO4j//////4i7MwAAAAAAAAAAAAAAAAAAMzu4iIiIi7MzAAAAAAAAAAAAAAAAAAAAABMzM7szMzEAAA
        AAAAAAAAAAAAAAAAAAAAAAAREQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////AAD///////8AAP//
        /////wAA////////AAD///////8AAP//+B///wAA//+AAf//AAD//gAAf/8AAP/4AAAf/wAA//AAAA//
        AAD/4AAAB/8AAP/AAAAD/wAA/4AAAAH/AAD/AAAAAP8AAP8AAAAA/wAA/gAAAAB/AAD+AAAAAH8AAPwA
        AAAAPwAA/AAAAAA/AAD4AAAAAB8AAPgAAAAAHwAA+AAAAAAfAAD4AAAAAB8AAPgAAAAAHwAA+AAAAAAf
        AAD4AAAAAB8AAPgAAAAAHwAA+AAAAAAfAAD4AAAAAB8AAPgAAAAAHwAA/AAAAAA/AAD8AAAAAD8AAPwA
        AAAAPwAA/gAAAAB/AAD+AAAAAH8AAP8AAAAA/wAA/4AAAAH/AAD/wAAAA/8AAP/AAAAD/wAA//AAAA//
        AAD/+AAAH/8AAP/8AAA//wAA//8AAP//AAD//+AH//8AAP///////wAA////////AAD///////8AAP//
        /////wAA
</value>
  </data>
</root>